{"version":3,"sources":["constants.js","components/Task/index.js","components/Column/index.js","initialTasks.js","components/Board/index.js","App.js","serviceWorker.js","index.js","assets/grip-vertical-solid.svg","components/Task/style.module.scss","components/Column/style.module.scss","components/Board/style.module.scss"],"names":["ITEM_TYPE","cx","classnames","bind","styles","PropTypes","object","number","Task","props","task","taskIndex","taskId","content","draggableId","index","type","provided","snapshot","draggableProps","dragHandleProps","innerRef","isDragging","className","ref","data-is-dragging","Column","columnData","columnIndex","columnId","columnTitle","taskList","dragInnerRef","droppableId","droppableProps","dropInnerRef","placeholder","isDraggingOver","data-is-over","src","DragIcon","alt","map","key","initialTaskLists","Board","useState","setTaskList","useEffect","console","log","onDragEnd","result","source","destination","reason","sourceColumnId","sourceIndex","targetColumnId","targetIndex","newTaskList","cloneDeep","sourceColumnIndex","findIndex","item","targetColumnIndex","sourceTaskList","targetTaskList","splice","sourceTaskData","sourceColumnData","direction","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.a985045f.chunk.js","sourcesContent":["const ITEM_TYPE = {\n  TASK: 'task',\n  COLUMN: 'column',\n}\n\nexport { ITEM_TYPE }","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Draggable } from 'react-beautiful-dnd'\nimport classnames from 'classnames/bind'\n\n// constant\nimport { ITEM_TYPE } from '../../constants'\n\n// style\nimport styles from './style.module.scss'\n\nconst cx = classnames.bind(styles)\n\nexport const propTypes = {\n  task: PropTypes.object,\n  taskIndex: PropTypes.number,\n}\n\nfunction Task(props) {\n  const { task, taskIndex } = props\n  const { taskId, content } = task\n\n  return (\n    <Draggable draggableId={taskId} index={taskIndex} type={ITEM_TYPE.TASK}>\n      {(provided, snapshot) => {\n        const { draggableProps, dragHandleProps, innerRef } = provided\n        const { isDragging } = snapshot\n        return (\n          <div\n            className={cx('wrapper')}\n            {...draggableProps}\n            {...dragHandleProps}\n            ref={innerRef}\n          >\n            <div className={cx('task')} data-is-dragging={isDragging}>\n              <strong>[IT-{taskId}]</strong>\n              <p>{content}</p>\n            </div>\n          </div>\n        )\n      }}\n\n    </Draggable>\n  )\n}\n\nexport default Task\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport classnames from 'classnames/bind'\nimport DragIcon from '../../assets/grip-vertical-solid.svg'\n\n// component\nimport Task from '../Task'\n\n// constant\nimport { ITEM_TYPE } from '../../constants'\n\n// style\nimport styles from './style.module.scss'\n\nconst cx = classnames.bind(styles)\n\nexport const propTypes = {\n  columnData: PropTypes.object,\n  columnIndex: PropTypes.number,\n}\n\nfunction Column(props) {\n  const { columnData, columnIndex } = props\n  const { columnId, columnTitle, taskList } = columnData\n\n  return (\n    <Draggable draggableId={columnId} index={columnIndex} type={ITEM_TYPE.COLUMN}>\n      {(provided, snapshot) => {\n        const { draggableProps, innerRef: dragInnerRef, dragHandleProps } = provided\n        const { isDragging } = snapshot\n        return (\n          <div className={cx('wrapper')} {...draggableProps} ref={dragInnerRef} data-is-dragging={isDragging}>\n            <Droppable droppableId={columnId} type={ITEM_TYPE.TASK}>\n              {(provided, snapshot) => {\n                const { droppableProps, innerRef: dropInnerRef, placeholder } = provided\n                const { isDraggingOver } = snapshot\n                return (\n                  <div className={cx('column')} data-is-over={isDraggingOver}>\n                    <h3 className={cx('column-title')} data-is-over={isDraggingOver} {...dragHandleProps}>\n                      <img src={DragIcon} alt=\"drag\" className={cx('column-drag_icon')} />\n                      {columnTitle}\n                    </h3>\n                    <div ref={dropInnerRef} {...droppableProps}>\n                      {taskList.map((task, taskIndex) => {\n                        const { taskId } = task\n                        return <Task key={taskId} task={task} taskIndex={taskIndex} />\n                      })}\n                      {placeholder}\n                    </div>\n                  </div>\n                )\n              }}\n            </Droppable>\n          </div>\n        )\n      }}\n    </Draggable>\n  )\n}\n\nexport default Column\n","const initialData = {\n  tasks: {\n    'task-1': { id: 'task-1', content: 'Take out the garbage' },\n    'task-2': { id: 'task-2', content: 'Watch my favorite show' },\n    'task-3': { id: 'task-3', content: 'Charge my phone' },\n    'task-4': { id: 'task-4', content: 'Cook dinner' },\n  },\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'To do',\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\n    }\n  },\n  columnOrder: ['column-1']\n}\n\nconst initialTaskLists = [\n  {\n    columnId: 'c01',\n    columnTitle: 'To Do',\n    taskList: [\n      { taskId: '100', content: 'Code Refinement' },\n      { taskId: '101', content: 'Daily Meeting' },\n      { taskId: '102', content: 'Study Vue' },\n      { taskId: '103', content: 'Add RWD' },\n    ],\n  },\n  {\n    columnId: 'c02',\n    columnTitle: 'In Progress',\n    taskList: [\n      { taskId: '104', content: 'Fix IE bugs' },\n      { taskId: '105', content: 'Study React-DnD' },\n    ],\n  },\n  {\n    columnId: 'c03',\n    columnTitle: 'Done',\n    taskList: [\n      { taskId: '106', content: 'Write testing' }\n    ],\n  }\n\n]\n\nexport { initialData, initialTaskLists }","import React, { useState, useEffect } from 'react'\nimport Column from '../Column'\nimport classnames from 'classnames/bind'\nimport { initialTaskLists } from '../../initialTasks'\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\nimport cloneDeep from 'lodash/cloneDeep'\nimport findIndex from 'lodash/findIndex'\n\n// constant\nimport { ITEM_TYPE } from '../../constants'\n\n// style\nimport styles from './style.module.scss'\n\nconst cx = classnames.bind(styles)\n\nexport const propTypes = {}\n\nfunction Board(props) {\n  const [taskList, setTaskList] = useState(initialTaskLists)\n  useEffect(() => {\n    console.log(\n      '%c STATE %c taskList ',\n      'background:#35495e; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff',\n      'background:#61dafb; padding: 1px; border-radius: 0 3px 3px 0;  color: #35495e',\n      taskList\n    )\n  }, [taskList])\n\n  const handleSorting = (result) => {\n    const { source, destination, draggableId, type, reason } = result\n\n    // 當放置於 droppable ground 區域外的時候，不做任何事\n    if (!destination) return\n    const { droppableId: sourceColumnId, index: sourceIndex } = source\n    const { droppableId: targetColumnId, index: targetIndex } = destination\n    // 當放置的 item 是自己的時候，不做任何事\n    if (sourceColumnId === targetColumnId && sourceIndex === targetIndex) return\n\n    const newTaskList = cloneDeep(taskList)\n    const sourceColumnIndex = findIndex(newTaskList, (item) => item.columnId === sourceColumnId)\n    const targetColumnIndex = findIndex(newTaskList, (item) => item.columnId === targetColumnId)\n\n    // 若 drag type 是 task\n    if (type === ITEM_TYPE.TASK) {\n      const sourceTaskList = newTaskList[sourceColumnIndex].taskList\n      const targetTaskList = newTaskList[targetColumnIndex].taskList\n      const [sourceTaskData] = sourceTaskList.splice(sourceIndex, 1)\n      targetTaskList.splice(targetIndex, 0, sourceTaskData)\n      // 若 drag type 是 column\n    } else if (type === ITEM_TYPE.COLUMN) {\n      const [sourceColumnData] = newTaskList.splice(sourceIndex, 1)\n      newTaskList.splice(targetIndex, 0, sourceColumnData)\n    }\n\n    setTaskList(newTaskList)\n  }\n\n  return (\n    <>\n      <DragDropContext onDragEnd={handleSorting}>\n        <h1 className={cx('board-title')}>JIRA Board made with React-Beautiful-DnD</h1>\n        <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type={ITEM_TYPE.COLUMN}>\n          {(provided) => {\n            const { droppableProps, innerRef, placeholder } = provided\n            return (\n              <div className={cx('board')} {...droppableProps} ref={innerRef}>\n                {taskList.map((columnData, columnIndex) => {\n                  const { columnId } = columnData\n                  return <Column key={columnId} columnData={columnData} columnIndex={columnIndex} />\n                })}\n                {placeholder}\n              </div>\n            )\n          }}\n        </Droppable>\n      </DragDropContext>\n    </>\n  )\n}\n\nexport default Board\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board'\n\nfunction App() {\n\n  return <Board />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/grip-vertical-solid.d1cdbeac.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__1mH-E\",\"task\":\"style_task__1Z0ZZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__2AQZY\",\"column\":\"style_column__3dntK\",\"column-title\":\"style_column-title__u52eM\",\"column-drag_icon\":\"style_column-drag_icon__21qwS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"style_board__2h4J5\",\"board-title\":\"style_board-title__2PRFI\"};"],"sourceRoot":""}